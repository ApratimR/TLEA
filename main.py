'''
TODO:create a key generator of desired length
    1. will generate a number as output of fixed length
    2. will change per character in key string
TODO:create a encryption/decryption algo that will use the expanded key and a b;ocl of string as input
    1. easy to compute
    2. block size = ???
'''

import numpy as np


#char array (size = 95)
char_array = list("!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ "+'"')


#converts character list to integer values
def converter(parameter1):
    local_ar1 = []
    try:
        for temp1 in parameter1:
            local_ar1.append(char_array.index(temp1))
    except:
        print("enter valid string default set to 1")
        local_ar1=1
    return local_ar1



data = list(input("enter some text to encrypt"))
key = converter(list(input("enter a key to encrypt")))
print(key)

#the key generator
def key_gen(key):

    key_string_length = len(key)
    start_constant = np.array([
        [65, 45, 94, 42, 18, 60, 37, 86, 87, 34, 64, 47, 71, 7, 3, 54, 79, 70, 22, 75, 50, 68, 41, 48, 30, 11, 35, 69, 57, 85, 82, 49, 38, 91, 2, 27, 23, 43, 55, 67, 46, 31, 33, 53, 25, 9, 5, 93, 61, 0, 39, 88, 1, 59, 12, 40, 24, 78, 76, 20, 17, 81, 92, 6, 36, 28, 4, 77, 52, 72, 51, 62, 13, 10, 8, 19, 14, 80, 15, 56, 74, 84, 90, 44, 63, 32, 16, 58, 66, 73, 26, 83, 21, 89, 29],
        [50, 84, 23, 34, 41, 32, 51, 76, 90, 93, 3, 59, 87, 9, 33, 18, 70, 20, 53, 47, 28, 54, 24, 67, 65, 44, 1, 92, 40, 17, 66, 29, 4, 30, 49, 71, 0, 63, 88, 2, 35, 61, 77, 48, 26, 8, 73, 75, 89, 16, 43, 69, 37, 5, 82, 11, 42, 45, 79, 78, 31, 56, 81, 74, 22, 72, 60, 19, 62, 13, 15, 85, 52, 39, 55, 68, 46, 21, 83, 86, 7, 6, 91, 10, 57, 27, 36, 14, 94, 58, 38, 80, 12, 25, 64],
        [48, 86, 16, 42, 82, 38, 78, 84, 0, 30, 31, 63, 6, 59, 34, 32, 83, 21, 18, 60, 50, 39, 13, 19, 44, 51, 75, 73, 85, 24, 91, 46, 71, 3, 69, 41, 11, 88, 43, 12, 5, 28, 65, 56, 33, 58, 14, 45, 9, 29, 79, 36, 89, 22, 81, 52, 35, 37, 17, 61, 7, 72, 53, 77, 57, 92, 74, 10, 8, 67, 1, 49, 62, 4, 20, 64, 93, 47, 76, 2, 80, 90, 68, 66, 23, 70, 87, 40, 25, 94, 27, 26, 55, 54, 15],
        [91, 22, 94, 9, 1, 39, 64, 55, 16, 54, 21, 89, 78, 29, 77, 71, 27, 58, 26, 20, 57, 47, 38, 19, 83, 10, 35, 6, 8, 5, 80, 46, 23, 62, 65, 84, 69, 45, 24, 13, 28, 88, 59, 70, 82, 18, 7, 36, 56, 63, 12, 68, 34, 14, 66, 37, 53, 42, 43, 4, 79, 92, 90, 25, 85, 15, 40, 48, 74, 73, 31, 72, 49, 86, 93, 67, 32, 17, 81, 11, 51, 50, 3, 0, 30, 52, 44, 41, 87, 2, 60, 61, 76, 75, 33],
        [77, 69, 13, 90, 81, 20, 44, 19, 31, 52, 68, 15, 59, 75, 50, 18, 36, 21, 37, 11, 91, 43, 64, 6, 88, 16, 58, 62, 35, 30, 76, 67, 3, 25, 5, 65, 10, 86, 87, 27, 8, 85, 39, 66, 48, 29, 54, 55, 71, 83, 61, 40, 32, 74, 2, 63, 94, 33, 42, 34, 4, 73, 47, 24, 57, 56, 78, 45, 49, 80, 14, 12, 26, 93, 79, 53, 22, 0, 70, 46, 7, 60, 9, 17, 38, 41, 1, 23, 28, 89, 51, 84, 72, 82, 92],
        [9, 30, 17, 38, 65, 91, 11, 84, 70, 58, 47, 49, 42, 26, 36, 45, 32, 34, 43, 24, 89, 73, 68, 94, 14, 2, 50, 29, 37, 18, 22, 67, 56, 80, 59, 76, 51, 57, 31, 54, 13, 8, 3, 72, 60, 25, 77, 6, 64, 86, 40, 10, 75, 0, 48, 93, 74, 88, 5, 41, 87, 90, 19, 82, 78, 21, 16, 4, 52, 85, 44, 27, 71, 63, 83, 20, 66, 15, 61, 35, 12, 81, 62, 1, 55, 92, 46, 33, 23, 7, 53, 39, 79, 69, 28],
    ])


    for temp1 in range(key_string_length):
        pass
    #return expanded_key
    



#calling the keygenerator
#key_gen(key)